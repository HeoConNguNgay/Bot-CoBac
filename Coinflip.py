import discord
from discord import app_commands
from discord.ext import commands
import random
import os
import time
import asyncio
from database_utils import get_balance, update_balance, update_stats, get_streak, update_streak, load_json, save_json
from config import CURRENCY_NAME
from cooldown import check_cooldown

STATS_FILE = "data/stats.json"
HEADS_IMG = "https://upload.wikimedia.org/wikipedia/commons/1/1c/US_Nickel_Obv.png"
TAILS_IMG = "https://upload.wikimedia.org/wikipedia/commons/9/9b/US_Nickel_Rev.png"
MY_USER_ID = 426804092778840095  # ‚ö†Ô∏è Thay b·∫±ng ID th·∫≠t c·ªßa b·∫°n

# ==== TI·ªÜN √çCH KI·ªÇM TRA TR·∫†NG TH√ÅI NG∆Ø·ªúI CH∆†I ====
def is_banned(uid):
    return load_json("data/banned.json").get(str(uid), False)

def is_locked(uid):
    return load_json("data/locked.json").get(str(uid), False)

# ==== L·ªöP CH√çNH: COINFLIP GAME ====
class Coinflip(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # Slash l·ªánh: /cf
    @app_commands.command(name="cf", description="Ch∆°i tung ƒë·ªìng xu c∆∞·ª£c ti·ªÅn")
    @app_commands.describe(bet="S·ªë ti·ªÅn c∆∞·ª£c", side="Ch·ªçn m·∫∑t: heads (ng·ª≠a) ho·∫∑c tails (s·∫•p)")
    @app_commands.choices(side=[
        app_commands.Choice(name="Heads", value="heads"),
        app_commands.Choice(name="Tails", value="tails")
    ])
    async def coinflip(self, interaction: discord.Interaction, bet: int, side: app_commands.Choice[str]):
        user_id = interaction.user.id
        wait_time = check_cooldown(user_id)
        if wait_time:
            return await interaction.response.send_message(f"‚è≥ Vui l√≤ng ch·ªù {wait_time:.1f} gi√¢y tr∆∞·ªõc khi ch∆°i ti·∫øp.", ephemeral=True)
        if is_banned(user_id) or is_locked(user_id):
            return await interaction.response.send_message("üö´ T√†i kho·∫£n c·ªßa b·∫°n b·ªã h·∫°n ch·∫ø.", ephemeral=True)
        balance = get_balance(user_id)
        if bet < 1:
            return await interaction.response.send_message("‚ùó C∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        if bet > 1_000_000:
            return await interaction.response.send_message("‚ùó C∆∞·ª£c t·ªëi ƒëa l√† 1,000,000.", ephemeral=True)
        if bet > balance:
            return await interaction.response.send_message(f"‚ùó Kh√¥ng ƒë·ªß ti·ªÅn! Hi·ªán c√≥ {balance:,} {CURRENCY_NAME}.", ephemeral=True)

        await self.resolve_flip(interaction, user_id, bet, side.value)

    # Slash l·ªánh: /cfall - all-in to√†n b·ªô
    @app_commands.command(name="cfall", description="C∆∞·ª£c to√†n b·ªô s·ªë d∆∞ v√†o tung ƒë·ªìng xu")
    @app_commands.describe(side="Ch·ªçn m·∫∑t")
    @app_commands.choices(side=[
        app_commands.Choice(name="Heads", value="heads"),
        app_commands.Choice(name="Tails", value="tails")
    ])
    async def coinflip_all(self, interaction: discord.Interaction, side: app_commands.Choice[str]):
        user_id = interaction.user.id
        wait_time = check_cooldown(user_id)
        if wait_time:
            return await interaction.response.send_message(f"‚è≥ Vui l√≤ng ch·ªù {wait_time:.1f} gi√¢y tr∆∞·ªõc khi ch∆°i ti·∫øp.", ephemeral=True)
        if is_banned(user_id) or is_locked(user_id):
            return await interaction.response.send_message("üö´ T√†i kho·∫£n c·ªßa b·∫°n b·ªã h·∫°n ch·∫ø.", ephemeral=True)
        balance = get_balance(user_id)
        if balance < 1:
            return await interaction.response.send_message("‚ùó B·∫°n kh√¥ng c√≥ ti·ªÅn ƒë·ªÉ c∆∞·ª£c.", ephemeral=True)

        await self.resolve_flip(interaction, user_id, balance, side.value)

    # üìä Th·ªëng k√™ c√° nh√¢n
    @app_commands.command(name="cfstats", description="Xem th·ªëng k√™ th·∫Øng/thua xu v√† chu·ªói th·∫Øng")
    async def cf_stats(self, interaction: discord.Interaction):
        user_id = str(interaction.user.id)
        stats = load_json(STATS_FILE).get(user_id, {"win": 0, "loss": 0})
        wins = stats.get("win", 0)
        losses = stats.get("loss", 0)
        total = wins + losses
        winrate = f"{(wins / total * 100):.2f}%" if total else "N/A"
        streak = get_streak(int(user_id))

        embed = discord.Embed(title="üìä Coinflip Stats", color=discord.Color.green())
        embed.add_field(name="üéØ Th·∫Øng", value=str(wins), inline=True)
        embed.add_field(name="üí• Thua", value=str(losses), inline=True)
        embed.add_field(name="üìà T·ª∑ l·ªá th·∫Øng", value=winrate, inline=True)
        embed.add_field(name="üî• Chu·ªói th·∫Øng hi·ªán t·∫°i", value=str(streak), inline=False)
        await interaction.response.send_message(embed=embed)

    # üèÜ BXH
    @app_commands.command(name="cfleaderboard", description="Xem top ng∆∞·ªùi ch∆°i th·∫Øng nhi·ªÅu nh·∫•t")
    async def cf_leaderboard(self, interaction: discord.Interaction):
        stats_data = load_json(STATS_FILE)
        top = sorted(stats_data.items(), key=lambda item: item[1].get("win", 0), reverse=True)[:10]

        embed = discord.Embed(title="üèÜ B·∫£ng x·∫øp h·∫°ng Coinflip", color=discord.Color.purple())
        for idx, (uid, data) in enumerate(top, 1):
            user = await self.bot.fetch_user(int(uid))
            streak = get_streak(int(uid))
            embed.add_field(
                name=f"#{idx} - {user.name}",
                value=f"üéØ Th·∫Øng: {data.get('win', 0)} | üî• Streak: {streak}",
                inline=False
            )
        await interaction.response.send_message(embed=embed)

    # üõ†Ô∏è Admin reset
    @app_commands.command(name="cfreset", description="Reset d·ªØ li·ªáu coinflip (Admin)")
    @app_commands.describe(user="Ng∆∞·ªùi c·∫ßn reset")
    async def cf_reset(self, interaction: discord.Interaction, user: discord.User):
        if not interaction.user.guild_permissions.administrator:
            return await interaction.response.send_message("‚ùó B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True)

        user_id = str(user.id)
        stats = load_json(STATS_FILE)
        if user_id in stats:
            stats[user_id] = {"win": 0, "loss": 0}
            save_json(STATS_FILE, stats)
            update_streak(int(user_id), False)
            await interaction.response.send_message(f"‚úÖ ƒê√£ reset d·ªØ li·ªáu coinflip cho {user.mention}.")
        else:
            await interaction.response.send_message("‚ùó Ng∆∞·ªùi d√πng n√†y ch∆∞a c√≥ d·ªØ li·ªáu.", ephemeral=True)

    # üß† H√†m ch√≠nh x·ª≠ l√Ω tung xu & hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·∫πp
    async def resolve_flip(self, interaction, user_id, bet, chosen):
        await interaction.response.send_message(f"{interaction.user.mention} ƒë√£ c∆∞·ª£c üßä {bet:,} v√† ch·ªçn **{chosen.upper()}**...")
        msg = await interaction.original_response()

        for countdown in ["üåÄ Tung ƒë·ªìng xu...", "‚è≥ 3...", "‚è≥ 2...", "‚è≥ 1..."]:
            await msg.edit(content=countdown)
            await asyncio.sleep(1)

        flipped = random.choice(["heads", "tails"])
        is_win = (chosen == flipped)

        if is_win:
            reward = bet * 2
            update_balance(user_id, reward)
            update_stats(user_id, "win")
            streak = get_streak(user_id) + 1
            update_streak(user_id, True)
            result_text = f"üéâ ƒê·ªìng xu ra **{flipped.upper()}**! B·∫°n th·∫Øng üßä {reward:,}!üî• Chu·ªói th·∫Øng: {streak}"
        else:
            update_balance(user_id, -bet)
            update_stats(user_id, "loss")
            update_streak(user_id, False)
            result_text = f"üíî ƒê·ªìng xu ra **{flipped.upper()}**! B·∫°n thua üßä {bet:,}...\nüßä Chu·ªói th·∫Øng b·ªã reset"

        embed = discord.Embed(title="ü™ô K·∫øt qu·∫£ Coinflip", color=discord.Color.blue())
        embed.set_image(url=HEADS_IMG if flipped == "heads" else TAILS_IMG)
        embed.add_field(name="üë§ Ng∆∞·ªùi ch∆°i", value=interaction.user.mention, inline=True)
        embed.add_field(name="üéØ M·∫∑t ƒë√£ ch·ªçn", value=chosen.upper(), inline=True)
        embed.add_field(name="üìÄ K·∫øt qu·∫£ tung", value=flipped.upper(), inline=True)
        embed.add_field(name="üí¨ K·∫øt lu·∫≠n", value=result_text, inline=False)

        await msg.edit(content=None, embed=embed)

    # PREFIX BACKUP
    @commands.command(name="cf")
    async def cf_prefix(self, ctx: commands.Context, bet: int, side: str):
        class FakeChoice:
            def __init__(self, value): self.value = value
        if side.lower() not in ["heads", "tails"]:
            return await ctx.send("‚ùó Ch·ªâ ch·∫•p nh·∫≠n heads ho·∫∑c tails.")
        choice = FakeChoice(side.lower())
        interaction = await self.bot.get_application_context(ctx.message)
        await self.coinflip(interaction, bet, choice)

    @commands.command(name="cfall")
    async def cfall_prefix(self, ctx: commands.Context, side: str):
        class FakeChoice:
            def __init__(self, value): self.value = value
        if side.lower() not in ["heads", "tails"]:
            return await ctx.send("‚ùó Ch·ªâ ch·∫•p nh·∫≠n heads ho·∫∑c tails.")
        choice = FakeChoice(side.lower())
        interaction = await self.bot.get_application_context(ctx.message)
        await self.coinflip_all(interaction, choice)

    @commands.command(name="cfstats")
    async def cfstats_prefix(self, ctx: commands.Context):
        interaction = await self.bot.get_application_context(ctx.message)
        await self.cf_stats(interaction)

    @commands.command(name="cfleaderboard")
    async def cfleaderboard_prefix(self, ctx: commands.Context):
        interaction = await self.bot.get_application_context(ctx.message)
        await self.cf_leaderboard(interaction)

    @commands.command(name="cfreset")
    @commands.has_permissions(administrator=True)
    async def cfreset_prefix(self, ctx: commands.Context, user: discord.User):
        interaction = await self.bot.get_application_context(ctx.message)
        await self.cf_reset(interaction, user)

# ƒêƒÉng k√Ω cog
async def setup(bot):
    await bot.add_cog(Coinflip(bot))
